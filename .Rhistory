lecs = c(lecs, paste0('<a href="lectures/',fs[i],'">',ititle,'</a>'))
}
lecs
fs = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/labs/",".html")
fsfull = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/labs/",".html",full.names=T)
labs = c()
for(i in 1:length(fs)){
sc = readLines(fsfull[i])
ititle = sc[grepl("<title>",sc)]
ititle = stringr::str_squish(gsub("<|title|>|/","",ititle))
labs = c(lecs, paste0('<a href="labs/',fs[i],'">',ititle,'</a>'))
}
labs
fs = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/labs/",".html")
fsfull = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/labs/",".html",full.names=T)
labs = c()
for(i in 1:length(fs)){
sc = readLines(fsfull[i])
ititle = sc[grepl("<title>",sc)]
ititle = stringr::str_squish(gsub("<|title|>|/","",ititle))
labs = c(labs, paste0('<a href="labs/',fs[i],'">',ititle,'</a>'))
}
labs
tibble::lst(lecs,labs)
l <- tibble::lst(lecs,labs)
data.frame(lapply(l, `length<-`, max(lengths(l))))
knitr::kable(l)
knitr::kable(l,format="html")
kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped")
fileConn<-file("test.html")
writeLines(
kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"),
fileConn)
close(fileConn)
fileConn<-file("test.html")
writeLines(readLines("R/siteindex/dapr2_index_p1.html"), fileConn)
writeLines(
kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"),
fileConn)
writeLines(readLines("R/siteindex/dapr2_index_p2.html"), fileConn)
close(fileConn)
fileConn<-file("test.html")
writeLines(readLines("R/siteindex/dapr1_index_p1.html"), fileConn)
writeLines(
kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"),
fileConn)
writeLines(readLines("R/siteindex/dapr1_index_p2.html"), fileConn)
close(fileConn)
?writeLines
sink("test.html")
cat(readLines("R/siteindex/dapr1_index_p1.html"))
cat(kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"))
cat(readLines("R/siteindex/dapr1_index_p2.html"))
sink()
kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped")
sink("test.html")
cat(readLines("R/siteindex/dapr1_index_p1.html"))
cat(knitr::kable(l,format="html"))
cat(readLines("R/siteindex/dapr1_index_p2.html"))
sink()
sink("test.html")
cat(readLines("R/siteindex/dapr1_index_p1.html"))
print(kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"))
cat(readLines("R/siteindex/dapr1_index_p2.html"))
sink()
sink("test.html")
print(readLines("R/siteindex/dapr1_index_p1.html"))
print(kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"))
print(readLines("R/siteindex/dapr1_index_p2.html"))
sink()
sink("test.html")
cat(readLines("R/siteindex/dapr1_index_p1.html"))
cat(kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"))
cat(readLines("R/siteindex/dapr1_index_p2.html"))
sink()
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"),
readLines("R/siteindex/dapr1_index_p2.html")
, fileConn)
close(fileConn)
close(fileConn)
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"),
readLines("R/siteindex/dapr1_index_p2.html")), fileConn)
close(fileConn)
kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped")
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
cat(kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped")),
readLines("R/siteindex/dapr1_index_p2.html")), fileConn)
close(fileConn)
cat(kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped"),file="table.html")
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
readLines("table.html"),
readLines("R/siteindex/dapr1_index_p2.html")), fileConn)
close(fileConn)
tab <- kableExtra::kable_styling(knitr::kable(l,format="html"),bootstrap_options = "striped")
readr::write_file(tab, "table.html")
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
readLines("table.html"),
readLines("R/siteindex/dapr1_index_p2.html")), fileConn)
close(fileConn)
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
#             readLines("table.html"),
readLines("R/siteindex/dapr1_index_p2.html")), fileConn)
close(fileConn)
readLines("table.html")
tab <- knitr::kable(l,format="html")
readr::write_file(tab, "table.html")
readLines("table.html")
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
readLines("table.html")[-1],
readLines("R/siteindex/dapr1_index_p2.html")), fileConn)
close(fileConn)
tab <- knitr::kable(l)
readr::write_file(tab, "table.html")
readLines("table.html")
tab <- knitr::kable(l,format="html")
readr::write_file(tab, "table.html")
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
readLines("table.html")[-1],
readLines("R/siteindex/dapr1_index_p2.html")), fileConn)
close(fileConn)
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
readLines("table.html")[-1],
readLines("R/siteindex/dapr1_index_p2.html")), fileConn)
close(fileConn)
tab <- knitr::kable(l,format="html")
readr::write_file(tab, "table.html")
fileConn <- file("test.html")
writeLines(c(readLines("R/siteindex/dapr1_index_p1.html"),
readLines("table.html"),
readLines("R/siteindex/dapr1_index_p2.html")), fileConn)
close(fileConn)
rmarkdown::render(knitr::kable(l,format="html"),output_file = "table.html")
fs = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/lectures/",".html")
fsfull = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/lectures/",".html",
full.names=T)
labfs = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/labs/",".html")
labfsfull = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/labs/",".html",
full.names=T)
lecs = c()
for(i in 1:length(fs)){
sc = readLines(fsfull[i])
ititle = sc[grepl("<title>",sc)]
ititle = stringr::str_squish(gsub("<|title|>|/","",ititle))
lecs = c(lecs, paste0('<a href="lectures/',fs[i],'">',ititle,'</a>'))
}
labs = c()
for(i in 1:length(labfs)){
sc = readLines(labfsfull[i])
ititle = sc[grepl("<title>",sc)]
ititle = stringr::str_squish(gsub("<|title|>|/","",ititle))
labs = c(labs, paste0('<a href="labs/',fs[i],'">',ititle,'</a>'))
}
l <- tibble::lst(Slides = lecs,Workbook = labs)
l <- data.frame(lapply(l, `length<-`, max(lengths(l))))
lecs
l
labs
labfs = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/labs/",".html")
labfsfull = list.files("C:/Users/jking34/Desktop/uoepsy/dapr2/docs/2223/labs/",".html",
full.names=T)
labs = c()
for(i in 1:length(labfs)){
sc = readLines(labfsfull[i])
ititle = sc[grepl("<title>",sc)]
ititle = stringr::str_squish(gsub("<|title|>|/","",ititle))
labs = c(labs, paste0('<a href="labs/',fs[i],'">',ititle,'</a>'))
}
labs
labs
labfs
labfsfull
l
labs
lecs
N = 200
n_groups = 20
g = rep(1:n_groups, e = N/n_groups)      # the group identifier
x = rnorm(N)                             # an observation level continuous variable
sd_g = .4     # standard deviation for the random effect
sigma = .5     # standard deviation for the observation
sd_x = .4
re0 = rnorm(n_groups, sd = sd_g)  # random effects
re  = re0[g]
rex = rnorm(n_groups, sd = sd_x)  # random effects
re_x  = rex[g]
lp = (0 + re) + (-.5 + re_x)*x
y = rnorm(N, mean = lp, sd = sigma)               # create a continuous target variable
y_bin = rbinom(N, size = 1, prob = plogis(lp))    #- create a binary target variable
d = data.frame(x, y, y_bin, g = factor(g))
d
sim_basicrs <- function(seed=NULL, N = 200, n_groups = 20){
if(!is.null(seed)){
set.seed(seed)
}
g = rep(1:n_groups, e = N/n_groups)      # the group identifier
x = rnorm(N)                             # an observation level continuous variable
sd_g = .4     # standard deviation for the random effect
sigma = .5     # standard deviation for the observation
sd_x = .4
re0 = rnorm(n_groups, sd = sd_g)  # random effects
re  = re0[g]
rex = rnorm(n_groups, sd = sd_x)  # random effects
re_x  = rex[g]
lp = (0 + re) + (-.5 + re_x)*x
y = rnorm(N, mean = lp, sd = sigma)               # create a continuous target variable
y_bin = rbinom(N, size = 1, prob = plogis(lp))    #- create a binary target variable
data.frame(x, y, y_bin, g = factor(g))
}
sim_basicrs()
lmer(y~x+(1+x|g),d) %>% summary
library(lme4)
summary(lmer(y~x+(1+x|g),d))
n_groups = 21
g = rep(1:n_groups, e = N/n_groups)      # the group identifier
x = rnorm(N)                             # an observation level continuous variable
sd_g = .4     # standard deviation for the random effect
sigma = .5     # standard deviation for the observation
sd_x = .4
re0 = rnorm(n_groups, sd = sd_g)  # random effects
re  = re0[g]
rex = rnorm(n_groups, sd = sd_x)  # random effects
re_x  = rex[g]
lp = (0 + re) + (-.5 + re_x)*x
y = rnorm(N, mean = lp, sd = sigma)               # create a continuous target variable
g = rep(1:n_groups, e = N/n_groups)      # the group identifier
x = rnorm(N)                             # an observation level continuous variable
source("R/sim_basicrs.R")
sim_basicrs(seed=234)
df <- sim_basicrs(seed=234)
clm <- plm(y ~ 1 + x, data = df, model = "pooling", index = "g")
library(plm)
clm <- plm(y ~ 1 + x, data = df, model = "pooling", index = "g")
sqrt(diag(vcovHC(clm,
method='arellano',
cluster='group')))
summary(summary(y~1+x,df))
summary(lm(y~1+x,df))
sqrt(diag(vcov(lm(y~1+x,df))))
sqrt(diag(vcovHC(lm(y~1+x,df),
method='arellano',
cluster='group')))
clm <- plm(y ~ 1 + x, data = df, model = "pooling", index = "g")
sqrt(diag(vcovHC(clm,
method='arellano',
cluster='group')))
install.packages("lavaan.survey")
library(lavaan)
library(lavaan.survey)
survey.design <- svydesign(ids=~g, prob=~1, data=df)
survey.fit <- lavaan.survey(lavaan.fit="y~1+x", survey.design=survey.design)
initfit <- sem("y~1+x",df)
survey.fit <- lavaan.survey(lavaan.fit=initfit, survey.design=survey.design)
summary(survey.fit)
survey.design <- svydesign(ids=~g, data=df)
initfit <- sem("y~1+x",df)
survey.fit <- lavaan.survey(lavaan.fit=initfit, survey.design=survey.design)
summary(survey.fit)
partable(survey.fit)
partable(survey.fit)$se
partable(survey.fit)$se[2]
df <- sim_basicrs(seed=234)
df$g <- factor(df$g)
# standard SE
sqrt(diag(vcov(lm(y~1+x,df))))
clm <- plm(y ~ 1 + x, data = df, model = "pooling", index = "g")
sqrt(diag(vcovHC(clm,
method='arellano',
cluster='group')))
source("R/sim_basicrs.R")
df <- sim_basicrs()
df$g <- factor(df$g)
# standard SE
sqrt(diag(vcov(lm(y~1+x,df))))
library(plm)
clm <- plm(y ~ 1 + x, data = df, model = "pooling", index = "g")
sqrt(diag(vcovHC(clm, method='arellano', cluster='group')))
library(lavaan)
library(lavaan.survey)
survey.design <- svydesign(ids=~g, prob=~1, data=df)
initfit <- sem("y~1+x",df)
survey.fit <- lavaan.survey(lavaan.fit=initfit, survey.design=survey.design)
partable(survey.fit)$se[2]
sqrt(diag(vcov(lm(y~1+x,df))))
sqrt(diag(vcovHC(clm, method='arellano', cluster='group')))
partable(survey.fit)$se[2]
source("R/sim_basicrs.R")
df <- sim_basicrs()
df$g <- factor(df$g)
# standard SE
sqrt(diag(vcov(lm(y~1+x,df))))
library(plm)
clm <- plm(y ~ 1 + x, data = df, model = "pooling", index = "g")
sqrt(diag(vcovHC(clm, method='arellano', cluster='group')))
library(lavaan)
library(lavaan.survey)
survey.design <- svydesign(ids=~g, prob=~1, data=df)
initfit <- sem("y~1+x",df)
survey.fit <- lavaan.survey(lavaan.fit=initfit, survey.design=survey.design)
partable(survey.fit)$se[2]
sqrt(diag(vcov(lm(y~1+x,df))))[2]
sqrt(diag(vcovHC(clm, method='arellano', cluster='group')))[2]
partable(survey.fit)$se[2]
library(sandwich)
diag(vcovHC(lm(y~1+x,df), type = "HC"))^0.5
coeftest(clm, vcov=vcovHC(model.plm,type="HC0",cluster="group"))
library(lmtest)
coeftest(clm, vcov=vcovHC(model.plm,type="HC0",cluster="group"))
coeftest(clm, vcov=vcovHC(clm,type="HC0",cluster="group"))
partable(survey.fit)$se[2]
sqrt(diag(vcovHC(clm, method='arellano', cluster='group')))
partable(survey.fit)$se[2]
survey.fit <- lavaan.survey(lavaan.fit=initfit, survey.design=survey.design)
summary(survey.fit)
survey::svyglm(y~1+x,design=survey.design)
summary(survey::svyglm(y~1+x,design=survey.design))
source("R/sim_basicrs.R")
df <- sim_basicrs()
df$g <- factor(df$g)
# standard SE
sqrt(diag(vcov(lm(y~1+x,df))))
library(plm)
clm <- plm(y ~ 1 + x, data = df, model = "pooling", index = "g")
sqrt(diag(vcovHC(clm, method='arellano', cluster='group')))
survey.design <- svydesign(ids=~g, prob=~1, data=df)
initfit <- sem("y~1+x",df)
survey.fit <- lavaan.survey(lavaan.fit=initfit, survey.design=survey.design)
partable(survey.fit)$se[2]
summary(survey::svyglm(y~1+x,design=survey.design))
partable(survey.fit)$se[2]
sqrt(diag(vcovHC(clm, method='arellano', cluster='group')))
# standard SE
sqrt(diag(vcov(lm(y~1+x,df))))
#'  Quickly sim data for a basic model y~1+x+(1+x|g)
#' @param seed random seed to use
#' @param b0 fixed intercept
#' @param b1 fixed slope
#' @param z0 random intercept var
#' @param z1 random slope var
#' @param e residual var
#' @export
#' @examples
#' sim_basicrs()
sim_basicrs <- function(seed=NULL,b0=0,b1=.5,z0=.4,z1=.4,e=.5){
if(!is.null(seed)){
set.seed(seed)
}
N = 200
n_groups = 20
g = rep(1:n_groups, e = N/n_groups)      # the group identifier
x = rnorm(N)                             # an observation level continuous variable
re0 = rnorm(n_groups, sd = z0)  # random intercepts
re  = re0[g]
rex = rnorm(n_groups, sd = z1)  # random effects
re_x  = rex[g]
lp = (b0 + re) + (b1 + re_x)*x
y = rnorm(N, mean = lp, sd = e) # create a continuous target variable
y_bin = rbinom(N, size = 1, prob = plogis(lp)) # create a binary target variable
data.frame(x, g=factor(g), y, y_bin)
}
sim_basicrs()
library(lme4)
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
#' @param b0 fixed intercept
#' @param b1 fixed slope
#' @param z0 random intercept sd
#' @param z1 random slope sd
#' @param e residual var
#' @export
#' @examples
#' sim_basicrs()
#' library(lme4)
#' summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
sim_basicrs <- function(seed=NULL,b0=0,b1=1,z0=1,z1=1,e=1){
if(!is.null(seed)){
set.seed(seed)
}
N = 200
n_groups = 20
g = rep(1:n_groups, e = N/n_groups)      # the group identifier
x = rnorm(N)                             # an observation level continuous variable
re0 = rnorm(n_groups, sd = z0)  # random intercepts
re  = re0[g]
rex = rnorm(n_groups, sd = z1)  # random effects
re_x  = rex[g]
lp = (b0 + re) + (b1 + re_x)*x
y = rnorm(N, mean = lp, sd = e) # create a continuous target variable
y_bin = rbinom(N, size = 1, prob = plogis(lp)) # create a binary target variable
data.frame(x, g=factor(g), y, y_bin)
}
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
summary(lmer(y~1+x+(1+x|g),data=sim_basicrs()))
?simglm
??simglm
sim_basicrs()
df <- sim_basicrs()
library(tidyverse)
View(df)
df %>% count(g,y_bin)
df %>% count(g,y_bin) %>%
pivot_wider(values_from=n,names_from=y_bin,names_prefix = "response")
df2 <- df %>% count(g,y_bin) %>%
pivot_wider(values_from=n,names_from=y_bin,names_prefix = "response")
df2
df$x2= rnorm(nrow(df2))
df2
df2$x2 = rnorm(nrow(df2))
df2
mod <- glm( cbind(response1,response0) ~ x2, data = df2, family=binomial)
summary(mod)
anova(mod)
anova(mody, test="Chisq")
anova(mod, test="Chisq")
df2$x2 = sample(c("up","down"),nrow(df2),replace=T)
mod <- glm( cbind(response1,response0) ~ x2, data = df2, family=binomial)
summary(mod)
mod <- glm( cbind(response1,10-response1) ~ x2, data = df2, family=binomial)
summary(mod)
mod <- glm( cbind(response1,10-response1) ~ x2, data = df2, family=binomial)
summary(mod)
anova(mod, test="Chisq")
sjPlot::plot_model(mod,type="eff")
install.packages("gnm")
library(gnm)
gnm(cbind(response1,10-response1) ~ x2, data = df2, family=binomial)
mod <- glm( cbind(response1,10-response1) ~ x2, data = df2, family=binomial)
summary(mod)
gnm(cbind(response1,10-response1) ~ x2, data = df2, family=binomial)
gnm(cbind(response1,10-response1) ~ x2, data = df2, family=quasibinomial)
summary(gnm(cbind(response1,10-response1) ~ x2, data = df2, family=quasibinomial))
library(devtools)
library(roxygen2)
document()
document()
library(junk)
uoepsy_colors
library(junk)
library(roxygen2)
library(devtools)
document()
library(junk)
insertcallout()
::: {.callout-tip collapse="true"}
document()
library(junk)
document()
library(junk)
library(junk)
library(devtools)
library(roxygen2)
document()
coursecols = c(
`dapr1` =  "#0F4C81",
`dapr2` =  "#BF1932",
`dapr3` =  "#88B04B",
`usmr` =   "#FCBB06",
`msmr` =   "#a41ae4",
`ap` = "#670E36"
)
course=c("dapr1","dapr2")
coursecols[coursecols %in% course]
coursecols["dapr1"]
coursecols[course]
library(junk)
library(devtools)
library(roxygen2)
document()
library(junk)
library(junk)
library(roxygen2)
library(devtools)
document()
library(junk)
uoepsy_colors <- function(course=NULL){
coursecols = c(
`dapr1` =  "#0F4C81",
`dapr2` =  "#BF1932",
`dapr3` =  "#88B04B",
`usmr` =   "#FCBB06",
`msmr` =   "#a41ae4",
`ap` = "#670E36"
)
if(is.null(course)){coursecols} else {coursecols[course]}
}
uoepsy_colors()
document()
library(junk)
library(junk)
library(junk)
library(roxygen2)
library(devtools)
document()
document()
document()
library(junk)
